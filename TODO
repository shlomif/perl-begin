* Add a page about file/directory-handling :
    - Will share a lot of content with the Sys Admin page.
    - Refer to perldoc -f open and perldoc perlopentut.
    - Other CPAN modules.
    - inotify/etc.

* Add a page about web automation (maybe networking in general) :
    - WWW::Mechanize.
    - LWP
    - WWW::Curl and LWP::Curl
    - HTML::TreeBuilder / HTML::TreeBuilder::LibXML.
    - WWW::Selenium
    - Mozilla::Mechanize
    - IE::Mechanize
    - Networking modules for various protocols.
        - refer to the email page.

* Add a tutorial on how to create CPAN distributions.
    - an up-to-date one is really needed.

* Add some screenshots to the /uses/games page.

* Add more information about:
    - URI parsing.
    - Filenames and paths parsing.

* Pick up a better gvim colour scheme for the example code in the
perl-for-newbies lecture.

* Syntax-highlight the examples in the other code excerpts in the site
(especially the src/tutorials/bad-elements/ ).

* Add http://rosettacode.org/wiki/Main_Page .

* Further work on src/uses/chat-scripting/index.html.wml .
    - Maybe trim the introduction.
        - remove the what is IRC? stuff almost completely and just say
        "Perl has good support".
            - we can assume people will know what it is, and if not
            there's the link.
    - Add Jabber/XMPP.
    - Add the other frameworks:
        - <perlbot> rindolf: Don't parse IRC with regex! See
          POE::Component::IRC, Bot::BasicBot. Avoid Net::IRC. See also
          http://poe.perl.org/ or Net::Async::IRC or AnyEvent::IRC .  
        - Not sure it's a good idea.

* Maybe a page on «What's next "after" perl?».

* Page about Perl Humour.
    - http://perl.net.au/wiki/Perl_Humour .

* Books:
    - http://oreilly.com/catalog/0636920018476/ - Perl Pocket Reference.
    - http://oreilly.com/catalog/9780596004927/ - Programming Perl, 4th ed.
    - http://oreilly.com/catalog/0636920018452/ - Learning Perl, 6th ed.
        - All covering perl-5.14.x.

* 

<<<
I enjoyed the article, "Perl Elements to Avoid" at perl-begin.org.

However, I suggest it isn't sufficient to tell people what to not do. They need
suggestions on suitable alternatives. "Avoid  nested calls" is fair advice, but
now the beginner is lost, with no alternatives. They can figure out to save
intermediate results, and call routines on those, but that is just a more
verbose  way of doing the same thing. The beginner is unlikely to consider
delegation.
>>>

Long Term:
----------

