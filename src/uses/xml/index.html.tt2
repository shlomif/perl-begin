[%- SET title = "Perl for XML Processing" -%]
[%- PROCESS "blocks.tt2" -%]

[%- main_class.addClass("fancy_sects") -%]

[%- WRAPPER wrap_html -%]
[%- PROCESS "Inc/html-selector-xpath.tt2" -%]

<p>
This page will cover how to properly process XML using Perl and
various recommended modules from CPAN (= Comprehensive Perl Archive Network).
</p>

<toc />

[% WRAPPER h2_section id = "technologies" title = "Technologies of Interest" %]

[% WRAPPER h3_section href = "https://metacpan.org/dist/XML-LibXML/" id = "XML-LibXML" title = "XML-LibXML" %]

<p>
XML-LibXML is the de-facto standard for XML processing in Perl. It's a
comprehensive CPAN module based on the
<a href="http://xmlsoft.org/">libxml2</a> library, that provides DOM (Document
Object Module), SAX (a stream parser), a pull parser, XPath, and
 [% WRAPPER cpan_dist d = "XML-LibXSLT" -%]XSLT[%- END %]
 support. XML-LibXML has good reference documentation and is actively
 maintained.
The <a href="http://grantm.github.io/perl-libxml-by-example/">Perl
XML::LibXML by Example</a> site provides a tutorial suitable for beginners.
</p>

<p>
One note is that you should be aware of XML namespaces and how they interact
with the DOM and the XML-LibXML API before using this library.
</p>

[% END %]

[% WRAPPER h3_section id = "xpath" title = "XPath" %]

<p>
<a href="https://en.wikipedia.org/wiki/XPath">XPath</a> is an
XML-related technology (but not notated in XML) that allows one
to locate nodes in XML files using a compact syntax. One can use it using
<a href="#XML-LibXML">XML::LibXML</a>, and should avoid using the old, slow,
and largely
unmaintained <code>XML::XPath</code> CPAN distribution.
</p>

[% INCLUDE html_sel_xpath %]

<p>
To learn about XPath, consult the following resources:
</p>

<ul>

<li>
<p>
<a href="http://zvon.org/xxl/XPathTutorial/Output/">Zvon XPath Tutorial</a>
</p>
</li>

<li>
<p>
<a href="http://zvon.org/comp/r/ref-XPath_1.html">Zvon XPath Reference</a>
</p>
</li>

<li>
<p>
<a href="http://ponderer.org/download/xpath/">Interactive XPath tester</a>
</p>
</li>

</ul>

[% WRAPPER h4_section id = "custom_xpath_functions" title = "Custom XPath Functions" %]

<p>
XML::LibXML allows the programmer to register custom XPath functions, coded
in Perl, in order to help working with XPath. For more information, see
[% cpan.self_mod( "m" => "XML::LibXML::XPathContext", ) %] .
</p>

[% END %]

[% END %]

[% WRAPPER h3_section id = "xslt" title = "XSLT" %]

<p>
<a href="http://en.wikipedia.org/wiki/XSLT">XSLT</a> stands for
Extensible Stylesheet Language Transformations and is a language for
transforming XML documents into other XML documents or other formats such
as HTML or plain text. Perl has good support for version 1.0 of XSLT by
using the [% cpan.self_dist( "d" => "XML-LibXSLT", ) %] distribution.
</p>

<p>
(Please avoid using [% cpan.self_dist( "d" => "XML-XSLT", ) %] which is old, and largely
unmaintained. Use XML-LibXSLT instead.)
</p>

<p>
For more about XSLT, see the following links, but note that XSLT makes
extensive use of <a href="#path">XPath</a>, so you should learn it first.
</p>

<ul>

<li>
<p>
<a href="http://zvon.org/xxl/XSLTutorial/Output/">The Zvon XSLT Tutorial</a>
- with many examples.
</p>
</li>

<li>
<p>
<a href="http://zvon.org/xxl/XSLTreference/Output/">The
Zvon XSLT Reference</a> - provides a useful reference.
</p>
</li>

<li>
<p>
<a href="http://www.xsltcake.com/">Interactive XSLT tester</a> - it seems
that the best results are achieved with the Mozilla Firefox browser, because
Google Chromium/Google Chrome and Opera do not handle XML namespaces with XSLT
well.
</p>
</li>

</ul>

[% END %]

[% END %]

[% WRAPPER h2_section id = "web-pages" title = "Web Pages about Perl and XML" %]

[% WRAPPER h3_section href = "http://perl-xml.sourceforge.net/" id = "perl-xml-project" title = "The Perl XML Project Home Page" %]

[% WRAPPER h4_section href = "http://perl-xml.sourceforge.net/faq/" id = "perl-xml-faq" title = "Their Frequently Asked Questions List (FAQ)" %]

[% END %]

[% END %]

[% END %]

[% WRAPPER h2_section id = "what-to-avoid" title = "What to Avoid" %]

[% WRAPPER h3_section id = "xml-simple" title = "XML-Simple" %]

<p>
XML-Simple is not so simple when done properly and takes the wrong approach
to dealing with XML. Please avoid using it. Look at XML-LibXML for an easy
and fast alternative.
</p>

[% END %]

[% WRAPPER h3_section id = "parsing-xml-using-regexes" title = "Parsing XML Using Regular Expressions" %]

<p>
You should also avoid parsing XML using regular expressions, because it
is difficult to handle the non-regular grammar of XML using them. Instead,
use a parser. For more information see:
</p>

<ol>

<li>
<p>
<a href="http://www.codinghorror.com/blog/2009/11/parsing-html-the-cthulhu-way.html">“Parsing HTML the Cthulhu Way”</a>.
</p>
</li>

<li>
<p>
<a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454">Comment on Stack Overflow</a> (funny).
</p>
</li>

</ol>

[% END %]

[% END %]

[% WRAPPER h2_section id = "xml-grammars" title = "Modules for Dealing with Specific Grammars" %]

<p>
In addition to generic XML parsers and manipulators, there are many
specialised modules on the CPAN for dealing with specific XML grammars. Many
of them reside under XML:: namespace. Some prominent examples include:
</p>

<ul>

<li>
[% cpan.b_self_dist( "d" => "XML-RSS", ) %] - manipulate
RSS (Really Simple Syndication) 0.9, 0.91, 1.0 and 2.0.
</li>

<li>
[% cpan.b_self_dist( "d" => "XML-Atom", ) %] -
manipulate Atom feeds. (Atom is an alternative syndication format)
</li>

<li>
[% cpan.b_self_dist( "d" => "XML-Feed", ) %] -
generate, parse, mix and match web feeds (Atom or RSS).
</li>

<li>
[% cpan.b_self_dist( "d" => "OpenOffice-OODoc", ) %] -
manipulate OpenOffice.org-like ODF (OpenDocument format) files.
</li>

</ul>

[% END %]

[% END %]
