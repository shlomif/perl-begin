#include '../template.wml'

<latemp_subject "Optimising and Profiling Perl Code" />

<h2 id="intro">Introduction</h2>

<p>
Before you try to make your code run faster, you should first make
sure that it is too slow for your needs. After all, spending time profiling
and optimising an already performant code will not yield any benefits for
production. So benchmark your code, see how well it performs and then continue
reading this page if it is indeed too slow. As a corrolary, when writing
code, always make sure you optimise for clarity and correctness first, not
for speed.
</p>

<p>
The first steps in optimising a code that is too slow are benchmarking and
profiling it, in order to see which parts of the code consume the most time.
</p>

<h2 id="benchmarking">Benchmarking</h2>

<h3 id="Benckmark.pm"><pdoc d="Benchmark"> - a module for
Benchmarking</pdoc></h3>

<p>
The Benchmark.pm module which is maintained as part of the Perl 5 core modules
can be used for benchmarking different codes for performance.
</p>

<h2 id="profiling">Profiling</h2>

<h3 id="nytprof"><cpan_self_dist d="Devel-NYTProf" /></h3>

<p>
<b>Devel-NYTProf</b> is a very powerful profiling framework for Perl that
leaves all the previous attempts at providing a Perl profiler way behind. Use
it to determine where your Perl code spends most of its time.
</p>

<h2 id="optimisation">How to Optimise</h2>

<p>
Here are some collected resources about optimisation:
</p>

<ol>
<li>
<p>
Shlomi Fish has written
<a href="http://www.shlomifish.org/philosophy/computers/optimizing-code-for-speed/">an essay titled "Optimizing Code for Speed"</a> (a somewhat more
<a href="http://en.wikibooks.org/wiki/Optimizing_Code_for_Speed">up-to-date
version</a> is available on <a href="http://en.wikibooks.org/">the English
Wikibooks site</a>).
</p>
</li>

<li>
<p>
Jon Bentley's out-of-print book
<a href="http://en.wikibooks.org/wiki/Special:BookSources/013970244X">"Writing Efficient Programs"</a> is a previous treatment of the subject.
</p>
</li>

<li>
<p>
<a href="http://community.livejournal.com/shlomif_tech/20200.html">"Shavin'
Another Second"</a> is a blog post by Shlomi Fish about how he optimised some
Perl code of his.
</p>
</li>

</ol>

<h3 id="use_db">Use a database</h3>

<p>
If your program is not using <a href="$(ROOT)/uses/databases/">a database</a>
of some sort, then using it may yield a substantial speed improvement.
See <a href="$(ROOT)/uses/databases">our page</a> about using database with
Perl for more information.
</p>

<h3 id="write_in_faster_lang">Optimise by
Writing Code in a Faster Language</h3>

<p>
If all else fails, then re-impelmenting the slow code in a faster language
such as
<a href="http://en.wikipedia.org/wiki/C_%28programming_language%29">C</a>
or <a href="http://en.wikipedia.org/wiki/C%2B%2B">C++</a> and embedding it
inside Perl is an option. Here are some alternatives for writing extensions
to Perl in C and other languages that are compiled to machine code:
</p>

<ol>
<li>
<p>
<a href="http://en.wikipedia.org/wiki/XS_%28Perl%29">XS</a> - XS is the original
way to bind code in C or similar languages to Perl, and is still popular.
However, it is difficult to perform correctly, and you may wish to look
at the alternatives below.
</p>
</li>
<li>
<p>
<cpan_self_mod m="Inline::C" /> - Inline::C provides a somewhat easier way to
create Perl bindings to C subroutines. There are other Inline modules on CPAN.
</p>
</li>
<li>
<p>
<a href="http://www.swig.org/">SWIG</a> - SWIG is the so-called "Simplified
Wrapper and Interface Generator" and allows to create bindings to Perl and
many other languages from a common source.
</p>
</li>

<li>
<p>
<a href="http://gitorious.org/perl-ctypes">perl-ctypes</a> - this is a port
of Python's ctypes package, that will eventually allow invoking the subroutines
of dynamically-loaded libraries from Perl at run-time.
</p>
</li>

</ol>
