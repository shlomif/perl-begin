[%- SET title = "Perl Development Topics" -%]
[%- PROCESS "blocks.tt2" -%]
[%- WRAPPER wrap_html -%]

<p>
This section aims to cover various topics that one is likely to encounter
when doing Perl development. They are mostly common to the particular task
one is trying to achieve with Perl and its domain.
</p>

[% WRAPPER h3_section href = "${base_path}topics/date-and-time/" id = "date-and-time" title = "Date and Time Handling" %]

<p>
Handling Dates and Times (parsing, formatting, manipulating, etc.) in Perl.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/debugging/" id = "debug" title = "Debugging Perl Programs" %]

<p>
When bugs occur, learn how to find their cause and correct them effectively.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/files-and-directories/" id = "files-and-dirs" title = "Files and Directories Handling" %]

<p>
How to handle files and directories in Perl.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/hashes/" id = "hashes" title = "Hashes" %]

<p>
Hashes (also known as “associative arrays”, “maps”, or “dictionaries”) are
one of Perl’s three fundamental data structures, and its least understood
one. This page gives some resources for learning about hashes.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/modules-and-packages" id = "modules" title = "Modules and Packages" %]

<p>
Encapsulate code in reusable units, and make sure symbols live in their own
namespaces. The precursor for <a href="#oop">Object-Oriented Programming</a>.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/references/" id = "references" title = "References" %]

<p>
References allow the programmer to store an aggregate data structure in a
simple variable, which can be passed around more easily, to represent complex,
nested data structures, and also serve as the basis of Perl's object system.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/regular-expressions/" id = "regexps" title = "Regular Expressions" %]

<p>
Regular expressions enable one to match simple or complex patterns in text
, extract them, and process them.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/object-oriented/" id = "oop" title = "Object-Oriented Programming (OOP) in Perl" %]

<p>
Learn about how to write classes, objects, and other concepts of
Object-Oriented Programming in Perl.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/optimising-and-profiling/" id = "optimise" title = "Optimising and Profiling" %]

<p>
How to make your Perl programs run faster.
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/scoping/" id = "scoping" title = "Scoping and Variables in Perl" %]

<p>
Scoping is Perl's way of making sure variables are localised and don't
interfere with variables of the same name in different places (or alternatively,
are not confused with different variables of similar names).
</p>

[% END %]

[% WRAPPER h3_section href = "${base_path}topics/cpan/" id = "cpan" title = "Using CPAN with Perl" %]

<p>
CPAN is the Comprehensive Perl Archive Network, which contains a wealth
of open-source and reusable source code, that can be used in your applications.
Follow the link to learn how to effectively use CPAN.
</p>

[% END %]

[% END %]
