#!/usr/bin/env perl

use strict;
use warnings;
use 5.014;
use autodie;

use Carp               ();
use Path::Tiny         qw/ path /;
use File::Find::Object ();

my $LATEMP_ROOT_SOURCE_DIR = path($0)->parent->absolute;

my $DIR = 'lib/make';

sub _run_cli_command
{
    my ( $cmd, $err ) = @_;

    if ( system(@$cmd) )
    {
        say "Running [@$cmd] failed!";
        Carp::confess($err);
    }
    return;
}

_run_cli_command( [ $^X, "$LATEMP_ROOT_SOURCE_DIR/bin/my-cookiecutter.pl" ],
    'cookiecutter failed.' );

_run_cli_command(
    [
        "gmake",
        "--silent",
        "-f",
        "$LATEMP_ROOT_SOURCE_DIR/lib/make/build-deps/build-deps-temp.mak",
        "LATEMP_ROOT_SOURCE_DIR=$LATEMP_ROOT_SOURCE_DIR",
    ],
    "build-deps failed!",
);

if (0)
{
    _run_cli_command( [ "gmake", "-s", "src/style.css" ], "style.css" );
}
else
{
    path("./dest")->mkpath();
    my $srcdir = path("$LATEMP_ROOT_SOURCE_DIR/lib/sass");
    foreach my $x ( grep { $_->basename !~ /print/ }
        $srcdir->children(qr#\.scss\z#) )
    {
        _run_cli_command(
            [
                "pysassc", "--style", "compressed", "-I", "$srcdir", "$x",
                ( "dest/" . ( $x->basename() =~ s#\.scss\z##mrs ) . ".css" ),
            ],
            "compass",
        );
    }
}

my @tt;
my @dirs_paths;
my @images_paths;
my $tree = File::Find::Object->new( {}, "src" );

while ( my $r = $tree->next_obj() )
{
    my $path = join "/", @{ $r->full_components() };
    if ( $r->is_file() )
    {
        if ( $path =~ s#\.x?html\K\.tt2\z##ms )
        {
            push @tt, $path;
        }
        elsif ( $path !~ m#(?:\~)\z#ms )
        {
            push @images_paths, $path;
        }
    }
    elsif ( $r->is_dir() and length($path) )
    {
        push @dirs_paths, $path;
    }
}
path("$DIR/tt2.txt")->spew_raw( join "\n", ( sort { $a cmp $b } @tt ), "" );
path("$DIR/include.mak")->spew_utf8(
    map {
        join( " ",
            uc( "PERL_BEGIN" . "_" . $_->[0] ),
            ":=", ( sort ( @{ $_->[1] } ) ) )
            . "\n"
    } [ "dirs", \@dirs_paths ],
    [ "images", \@images_paths ]
);

{
    open my $out_fh, ">", "$DIR/p4n.mak";
    print {$out_fh}
        qq#p4n_copy = mkdir -p `dirname \$\@` && cp -f \$< \$\@\n\n#;

    my @targets;
    foreach my $part_idx ( 1 .. 5 )
    {
        # find all the .pm files in @INC
        my @filenames;
        my $tree = File::Find::Object->new( {},
            "lib/tutorials/perl-for-newbies/lect${part_idx}-all-in-one/" );
        while ( my $r = $tree->next_obj() )
        {
            if ( $r->is_file() and $r->basename() ne "index\.html" )
            {
                push @filenames, $r->path();
            }
        }
        foreach my $fn ( sort { $a cmp $b } @filenames )
        {
            my $target = $fn;
            $target =~ s{\Alib/}{};
            $target =~ s{/lect(\d+)-all-in-one/}{/part$1/};

            path("dest/$target")->touchpath->spew_raw( path($fn)->slurp_raw );
            $target = "\$(PERL_BEGIN_DEST)/$target";
            push @targets, $target;
            print {$out_fh} "$target: $fn\n\t\$(call p4n_copy)\n\n";
        }
    }

    my $makefile_var_name = "DEST_TUTORIALS_PERL_FOR_NEWBIES_TARGETS";
    print {$out_fh} "$makefile_var_name = " . join( " ", @targets ) . "\n\n";
    print {$out_fh} "perl_for_newbies_extra_data: \$($makefile_var_name)\n\n";

    close($out_fh);
}
use lib ( path($0)->parent->absolute->child(qw# lib #) . "" );
use lib "./lib";
require HTML::Latemp::GenDepsTT2;
HTML::Latemp::GenDepsTT2->new(
    {
        src_dir => 'src',
        src_var => '$(PERL_BEGIN_DEST)',
    }
)->run;

path('Makefile')
    ->spew_raw(
"LATEMP_ROOT_SOURCE_DIR = $LATEMP_ROOT_SOURCE_DIR\n\ninclude \$(LATEMP_ROOT_SOURCE_DIR)/$DIR/main.mak\n"
    );
foreach my $fn (qw# essays rendered xml #)
{
    path("lib/docbook/5/$fn")->mkpath();
}
